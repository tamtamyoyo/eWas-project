import { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { useLocation } from "wouter";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Link } from "wouter";
import ConnectedPlatforms from "@/components/dashboard/ConnectedPlatforms";
import { useIsMobile } from "@/hooks/use-mobile";
import PostSchedule from "@/components/dashboard/PostSchedule";
import { useQuery } from "@tanstack/react-query";
import { type Post, type SocialAccount } from "@shared/schema";

export default function Dashboard() {
  const { t } = useTranslation();
  const [, navigate] = useLocation();
  const isMobile = useIsMobile();
  
  // Fetch connected social accounts
  const { data: socialAccounts, isLoading: loadingAccounts } = useQuery<SocialAccount[]>({
    queryKey: ['/api/social-accounts'],
  });
  
  // Fetch scheduled posts
  const { data: scheduledPosts, isLoading: loadingPosts } = useQuery<Post[]>({
    queryKey: ['/api/posts/scheduled'],
  });
  
  // Format scheduled posts for the calendar view
  const formattedScheduledPosts = React.useMemo(() => {
    if (!scheduledPosts || scheduledPosts.length === 0) return {};
    
    const result: Record<string, any[]> = {};
    
    scheduledPosts.forEach(post => {
      if (!post.scheduledAt) return;
      
      const date = new Date(post.scheduledAt);
      const dayKey = date.getDate().toString();
      const time = date.toTimeString().slice(0, 5);
      
      if (!result[dayKey]) {
        result[dayKey] = [];
      }
      
      result[dayKey].push({
        id: post.id.toString(),
        platform: post.platforms[0] || 'facebook', // Use first platform or default
        content: post.content,
        images: post.mediaUrls,
        time
      });
    });
    
    return result;
  }, [scheduledPosts]);
  
  const handlePostDetail = (post: any) => {
    // Navigate to post detail or edit page
    navigate(`/scheduled/${post.id}`);
  };
  
  const connectedAccountsCount = socialAccounts?.filter(a => a.isConnected)?.length || 0;
  const scheduledPostsCount = scheduledPosts?.length || 0;
  
  return (
    <div className="mb-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold">{t('dashboard.title')}</h1>
        <p className="text-neutral-500">{t('dashboard.subtitle')}</p>
      </div>
      
      {/* Quick actions */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <Card className="bg-gradient-to-tr from-blue-600 to-blue-500 text-white">
          <CardContent className="p-6">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="font-semibold mb-2">{t('dashboard.createPost')}</h3>
                <p className="text-sm opacity-90 mb-4">{t('dashboard.createPostDescription')}</p>
                <Link href="/compose">
                  <Button variant="secondary" size="sm" className="mt-2">
                    {t('dashboard.composeNow')}
                  </Button>
                </Link>
              </div>
              <div className="bg-white/20 p-3 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                  <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                </svg>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="font-semibold mb-2">{t('dashboard.connectedAccounts')}</h3>
                <p className="text-4xl font-bold text-blue-600">{connectedAccountsCount}</p>
                <Link href="/connect">
                  <Button variant="ghost" size="sm" className="mt-4 px-0">
                    {t('dashboard.connectMore')} →
                  </Button>
                </Link>
              </div>
              <div className="bg-blue-100 p-3 rounded-lg text-blue-600">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                  <circle cx="9" cy="7" r="4"></circle>
                  <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                  <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                </svg>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="font-semibold mb-2">{t('dashboard.scheduledPosts')}</h3>
                <p className="text-4xl font-bold text-blue-600">{scheduledPostsCount}</p>
                <Link href="/scheduled">
                  <Button variant="ghost" size="sm" className="mt-4 px-0">
                    {t('dashboard.viewSchedule')} →
                  </Button>
                </Link>
              </div>
              <div className="bg-blue-100 p-3 rounded-lg text-blue-600">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                  <line x1="16" y1="2" x2="16" y2="6"></line>
                  <line x1="8" y1="2" x2="8" y2="6"></line>
                  <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
      
      {/* Connected Platforms */}
      <Card className="mb-6">
        <CardContent className="p-6">
          <h2 className="text-xl font-semibold mb-4">{t('dashboard.connectedPlatforms')}</h2>
          <ConnectedPlatforms />
        </CardContent>
      </Card>
      
      {/* Post Schedule */}
      <Card className="mb-6">
        <CardContent className="p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">{t('dashboard.upcomingPosts')}</h2>
            <Link href="/scheduled">
              <Button variant="outline" size="sm">
                {t('dashboard.viewAll')}
              </Button>
            </Link>
          </div>
          
          {loadingPosts ? (
            <div className="flex items-center justify-center py-12">
              <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent"></div>
            </div>
          ) : (
            <>
              {scheduledPosts && scheduledPosts.length > 0 ? (
                <PostSchedule 
                  posts={formattedScheduledPosts} 
                  onViewDetail={handlePostDetail}
                />
              ) : (
                <div className="text-center py-12 border border-dashed rounded-lg">
                  <div className="text-4xl mb-3 text-gray-300">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mx-auto">
                      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                      <line x1="16" y1="2" x2="16" y2="6"></line>
                      <line x1="8" y1="2" x2="8" y2="6"></line>
                      <line x1="3" y1="10" x2="21" y2="10"></line>
                    </svg>
                  </div>
                  <p className="text-gray-500 mb-4">{t('dashboard.noScheduledPosts')}</p>
                  <Link href="/compose">
                    <Button>
                      {t('dashboard.createFirstPost')}
                    </Button>
                  </Link>
                </div>
              )}
            </>
          )}
        </CardContent>
      </Card>
      
      {/* Get started guide */}
      <Card>
        <CardContent className="p-6">
          <h2 className="text-xl font-semibold mb-4">{t('dashboard.gettingStarted')}</h2>
          
          <div className="space-y-4">
            <div className="flex items-start gap-4 p-4 rounded-lg border">
              <div className="bg-blue-100 text-blue-600 p-2 rounded-full">
                <span className="font-bold">1</span>
              </div>
              <div>
                <h3 className="font-medium">{t('dashboard.step1Title')}</h3>
                <p className="text-gray-500 text-sm mt-1">{t('dashboard.step1Description')}</p>
                {connectedAccountsCount === 0 && (
                  <Link href="/connect">
                    <Button variant="outline" size="sm" className="mt-2">
                      {t('dashboard.connectAccounts')}
                    </Button>
                  </Link>
                )}
              </div>
            </div>
            
            <div className="flex items-start gap-4 p-4 rounded-lg border">
              <div className="bg-blue-100 text-blue-600 p-2 rounded-full">
                <span className="font-bold">2</span>
              </div>
              <div>
                <h3 className="font-medium">{t('dashboard.step2Title')}</h3>
                <p className="text-gray-500 text-sm mt-1">{t('dashboard.step2Description')}</p>
                <Link href="/compose">
                  <Button variant="outline" size="sm" className="mt-2">
                    {t('dashboard.createPost')}
                  </Button>
                </Link>
              </div>
            </div>
            
            <div className="flex items-start gap-4 p-4 rounded-lg border">
              <div className="bg-blue-100 text-blue-600 p-2 rounded-full">
                <span className="font-bold">3</span>
              </div>
              <div>
                <h3 className="font-medium">{t('dashboard.step3Title')}</h3>
                <p className="text-gray-500 text-sm mt-1">{t('dashboard.step3Description')}</p>
                <Link href="/settings">
                  <Button variant="outline" size="sm" className="mt-2">
                    {t('dashboard.exploreSettings')}
                  </Button>
                </Link>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}